// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock.proto

#include "stock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace stp {
class StockMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockMeta>
      _instance;
} _StockMeta_default_instance_;
class StockElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockElement>
      _instance;
} _StockElement_default_instance_;
class StockDB_ElementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDB_ElementsEntry_DoNotUse>
      _instance;
} _StockDB_ElementsEntry_DoNotUse_default_instance_;
class StockDB_StockIndexEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDB_StockIndexEntry_DoNotUse>
      _instance;
} _StockDB_StockIndexEntry_DoNotUse_default_instance_;
class StockDBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDB>
      _instance;
} _StockDB_default_instance_;
}  // namespace stp
namespace protobuf_stock_2eproto {
void InitDefaultsStockMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stp::_StockMeta_default_instance_;
    new (ptr) ::stp::StockMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stp::StockMeta::InitAsDefaultInstance();
}

void InitDefaultsStockMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStockMetaImpl);
}

void InitDefaultsStockElementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stp::_StockElement_default_instance_;
    new (ptr) ::stp::StockElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stp::StockElement::InitAsDefaultInstance();
}

void InitDefaultsStockElement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStockElementImpl);
}

void InitDefaultsStockDB_ElementsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_stock_2eproto::InitDefaultsStockElement();
  {
    void* ptr = &::stp::_StockDB_ElementsEntry_DoNotUse_default_instance_;
    new (ptr) ::stp::StockDB_ElementsEntry_DoNotUse();
  }
  ::stp::StockDB_ElementsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsStockDB_ElementsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStockDB_ElementsEntry_DoNotUseImpl);
}

void InitDefaultsStockDB_StockIndexEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::stp::_StockDB_StockIndexEntry_DoNotUse_default_instance_;
    new (ptr) ::stp::StockDB_StockIndexEntry_DoNotUse();
  }
  ::stp::StockDB_StockIndexEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsStockDB_StockIndexEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStockDB_StockIndexEntry_DoNotUseImpl);
}

void InitDefaultsStockDBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_stock_2eproto::InitDefaultsStockMeta();
  protobuf_stock_2eproto::InitDefaultsStockDB_ElementsEntry_DoNotUse();
  protobuf_stock_2eproto::InitDefaultsStockDB_StockIndexEntry_DoNotUse();
  {
    void* ptr = &::stp::_StockDB_default_instance_;
    new (ptr) ::stp::StockDB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stp::StockDB::InitAsDefaultInstance();
}

void InitDefaultsStockDB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStockDBImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, stocktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, marketindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, industryindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockMeta, conceptindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockElement, needday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockElement, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockElement, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockElement, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_ElementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_ElementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_ElementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_ElementsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_StockIndexEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_StockIndexEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_StockIndexEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB_StockIndexEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, stocksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, metas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stp::StockDB, stockindex_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stp::StockMeta)},
  { 10, -1, sizeof(::stp::StockElement)},
  { 19, 26, sizeof(::stp::StockDB_ElementsEntry_DoNotUse)},
  { 28, 35, sizeof(::stp::StockDB_StockIndexEntry_DoNotUse)},
  { 37, -1, sizeof(::stp::StockDB)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::stp::_StockMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stp::_StockElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stp::_StockDB_ElementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stp::_StockDB_StockIndexEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stp::_StockDB_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stock.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013stock.proto\022\003stp\"\307\001\n\tStockMeta\022\014\n\004code"
      "\030\001 \001(\t\022+\n\tstockType\030\002 \001(\0162\030.stp.StockMet"
      "a.StockType\022\023\n\013marketIndex\030\003 \001(\005\022\025\n\rindu"
      "stryIndex\030\004 \001(\005\022\024\n\014conceptIndex\030\005 \001(\005\"=\n"
      "\tStockType\022\n\n\006MARKET\020\000\022\014\n\010INDUSTRY\020\001\022\013\n\007"
      "CONCEPT\020\002\022\t\n\005STOCK\020\003\"I\n\014StockElement\022\017\n\007"
      "needDay\030\001 \001(\005\022\014\n\004data\030\002 \003(\002\022\014\n\004flag\030\003 \003("
      "\010\022\014\n\004line\030\004 \001(\t\"\240\002\n\007StockDB\022\014\n\004days\030\001 \001("
      "\005\022\021\n\tstockSize\030\002 \001(\005\022\035\n\005metas\030\003 \003(\0132\016.st"
      "p.StockMeta\022,\n\010elements\030\004 \003(\0132\032.stp.Stoc"
      "kDB.ElementsEntry\0220\n\nstockIndex\030\005 \003(\0132\034."
      "stp.StockDB.StockIndexEntry\032B\n\rElementsE"
      "ntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.stp.S"
      "tockElement:\0028\001\0321\n\017StockIndexEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 594);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stock.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_stock_2eproto
namespace stp {
const ::google::protobuf::EnumDescriptor* StockMeta_StockType_descriptor() {
  protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stock_2eproto::file_level_enum_descriptors[0];
}
bool StockMeta_StockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StockMeta_StockType StockMeta::MARKET;
const StockMeta_StockType StockMeta::INDUSTRY;
const StockMeta_StockType StockMeta::CONCEPT;
const StockMeta_StockType StockMeta::STOCK;
const StockMeta_StockType StockMeta::StockType_MIN;
const StockMeta_StockType StockMeta::StockType_MAX;
const int StockMeta::StockType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void StockMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockMeta::kCodeFieldNumber;
const int StockMeta::kStockTypeFieldNumber;
const int StockMeta::kMarketIndexFieldNumber;
const int StockMeta::kIndustryIndexFieldNumber;
const int StockMeta::kConceptIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockMeta::StockMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_stock_2eproto::InitDefaultsStockMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stp.StockMeta)
}
StockMeta::StockMeta(const StockMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&stocktype_, &from.stocktype_,
    static_cast<size_t>(reinterpret_cast<char*>(&conceptindex_) -
    reinterpret_cast<char*>(&stocktype_)) + sizeof(conceptindex_));
  // @@protoc_insertion_point(copy_constructor:stp.StockMeta)
}

void StockMeta::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stocktype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conceptindex_) -
      reinterpret_cast<char*>(&stocktype_)) + sizeof(conceptindex_));
  _cached_size_ = 0;
}

StockMeta::~StockMeta() {
  // @@protoc_insertion_point(destructor:stp.StockMeta)
  SharedDtor();
}

void StockMeta::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockMeta::descriptor() {
  ::protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockMeta& StockMeta::default_instance() {
  ::protobuf_stock_2eproto::InitDefaultsStockMeta();
  return *internal_default_instance();
}

StockMeta* StockMeta::New(::google::protobuf::Arena* arena) const {
  StockMeta* n = new StockMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:stp.StockMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stocktype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conceptindex_) -
      reinterpret_cast<char*>(&stocktype_)) + sizeof(conceptindex_));
  _internal_metadata_.Clear();
}

bool StockMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stp.StockMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stp.StockMeta.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stp.StockMeta.StockType stockType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stocktype(static_cast< ::stp::StockMeta_StockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 marketIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marketindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 industryIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &industryindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conceptIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conceptindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stp.StockMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stp.StockMeta)
  return false;
#undef DO_
}

void StockMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stp.StockMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stp.StockMeta.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // .stp.StockMeta.StockType stockType = 2;
  if (this->stocktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stocktype(), output);
  }

  // int32 marketIndex = 3;
  if (this->marketindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->marketindex(), output);
  }

  // int32 industryIndex = 4;
  if (this->industryindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->industryindex(), output);
  }

  // int32 conceptIndex = 5;
  if (this->conceptindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->conceptindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stp.StockMeta)
}

::google::protobuf::uint8* StockMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stp.StockMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stp.StockMeta.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // .stp.StockMeta.StockType stockType = 2;
  if (this->stocktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stocktype(), target);
  }

  // int32 marketIndex = 3;
  if (this->marketindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->marketindex(), target);
  }

  // int32 industryIndex = 4;
  if (this->industryindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->industryindex(), target);
  }

  // int32 conceptIndex = 5;
  if (this->conceptindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->conceptindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stp.StockMeta)
  return target;
}

size_t StockMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stp.StockMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // .stp.StockMeta.StockType stockType = 2;
  if (this->stocktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stocktype());
  }

  // int32 marketIndex = 3;
  if (this->marketindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->marketindex());
  }

  // int32 industryIndex = 4;
  if (this->industryindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->industryindex());
  }

  // int32 conceptIndex = 5;
  if (this->conceptindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conceptindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stp.StockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const StockMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stp.StockMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stp.StockMeta)
    MergeFrom(*source);
  }
}

void StockMeta::MergeFrom(const StockMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stp.StockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.stocktype() != 0) {
    set_stocktype(from.stocktype());
  }
  if (from.marketindex() != 0) {
    set_marketindex(from.marketindex());
  }
  if (from.industryindex() != 0) {
    set_industryindex(from.industryindex());
  }
  if (from.conceptindex() != 0) {
    set_conceptindex(from.conceptindex());
  }
}

void StockMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stp.StockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockMeta::CopyFrom(const StockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stp.StockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockMeta::IsInitialized() const {
  return true;
}

void StockMeta::Swap(StockMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockMeta::InternalSwap(StockMeta* other) {
  using std::swap;
  code_.Swap(&other->code_);
  swap(stocktype_, other->stocktype_);
  swap(marketindex_, other->marketindex_);
  swap(industryindex_, other->industryindex_);
  swap(conceptindex_, other->conceptindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockMeta::GetMetadata() const {
  protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockElement::kNeedDayFieldNumber;
const int StockElement::kDataFieldNumber;
const int StockElement::kFlagFieldNumber;
const int StockElement::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockElement::StockElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_stock_2eproto::InitDefaultsStockElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stp.StockElement)
}
StockElement::StockElement(const StockElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      flag_(from.flag_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line().size() > 0) {
    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  needday_ = from.needday_;
  // @@protoc_insertion_point(copy_constructor:stp.StockElement)
}

void StockElement::SharedCtor() {
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needday_ = 0;
  _cached_size_ = 0;
}

StockElement::~StockElement() {
  // @@protoc_insertion_point(destructor:stp.StockElement)
  SharedDtor();
}

void StockElement::SharedDtor() {
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockElement::descriptor() {
  ::protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockElement& StockElement::default_instance() {
  ::protobuf_stock_2eproto::InitDefaultsStockElement();
  return *internal_default_instance();
}

StockElement* StockElement::New(::google::protobuf::Arena* arena) const {
  StockElement* n = new StockElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockElement::Clear() {
// @@protoc_insertion_point(message_clear_start:stp.StockElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  flag_.Clear();
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needday_ = 0;
  _internal_metadata_.Clear();
}

bool StockElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stp.StockElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 needDay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_flag())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 26u, input, this->mutable_flag())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line().data(), static_cast<int>(this->line().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stp.StockElement.line"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stp.StockElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stp.StockElement)
  return false;
#undef DO_
}

void StockElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stp.StockElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 needDay = 1;
  if (this->needday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needday(), output);
  }

  // repeated float data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated bool flag = 3;
  if (this->flag_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _flag_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->flag().data(), this->flag_size(), output);
  }

  // string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stp.StockElement.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->line(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stp.StockElement)
}

::google::protobuf::uint8* StockElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stp.StockElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 needDay = 1;
  if (this->needday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needday(), target);
  }

  // repeated float data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // repeated bool flag = 3;
  if (this->flag_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _flag_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->flag_, target);
  }

  // string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stp.StockElement.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stp.StockElement)
  return target;
}

size_t StockElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stp.StockElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool flag = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->flag_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flag_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string line = 4;
  if (this->line().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line());
  }

  // int32 needDay = 1;
  if (this->needday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->needday());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stp.StockElement)
  GOOGLE_DCHECK_NE(&from, this);
  const StockElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stp.StockElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stp.StockElement)
    MergeFrom(*source);
  }
}

void StockElement::MergeFrom(const StockElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stp.StockElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  flag_.MergeFrom(from.flag_);
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.needday() != 0) {
    set_needday(from.needday());
  }
}

void StockElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stp.StockElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockElement::CopyFrom(const StockElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stp.StockElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockElement::IsInitialized() const {
  return true;
}

void StockElement::Swap(StockElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockElement::InternalSwap(StockElement* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  flag_.InternalSwap(&other->flag_);
  line_.Swap(&other->line_);
  swap(needday_, other->needday_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockElement::GetMetadata() const {
  protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

StockDB_ElementsEntry_DoNotUse::StockDB_ElementsEntry_DoNotUse() {}
StockDB_ElementsEntry_DoNotUse::StockDB_ElementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StockDB_ElementsEntry_DoNotUse::MergeFrom(const StockDB_ElementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StockDB_ElementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[2];
}
void StockDB_ElementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StockDB_StockIndexEntry_DoNotUse::StockDB_StockIndexEntry_DoNotUse() {}
StockDB_StockIndexEntry_DoNotUse::StockDB_StockIndexEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StockDB_StockIndexEntry_DoNotUse::MergeFrom(const StockDB_StockIndexEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StockDB_StockIndexEntry_DoNotUse::GetMetadata() const {
  ::protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[3];
}
void StockDB_StockIndexEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void StockDB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDB::kDaysFieldNumber;
const int StockDB::kStockSizeFieldNumber;
const int StockDB::kMetasFieldNumber;
const int StockDB::kElementsFieldNumber;
const int StockDB::kStockIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDB::StockDB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_stock_2eproto::InitDefaultsStockDB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stp.StockDB)
}
StockDB::StockDB(const StockDB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metas_(from.metas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  elements_.MergeFrom(from.elements_);
  stockindex_.MergeFrom(from.stockindex_);
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&stocksize_) -
    reinterpret_cast<char*>(&days_)) + sizeof(stocksize_));
  // @@protoc_insertion_point(copy_constructor:stp.StockDB)
}

void StockDB::SharedCtor() {
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stocksize_) -
      reinterpret_cast<char*>(&days_)) + sizeof(stocksize_));
  _cached_size_ = 0;
}

StockDB::~StockDB() {
  // @@protoc_insertion_point(destructor:stp.StockDB)
  SharedDtor();
}

void StockDB::SharedDtor() {
}

void StockDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockDB::descriptor() {
  ::protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDB& StockDB::default_instance() {
  ::protobuf_stock_2eproto::InitDefaultsStockDB();
  return *internal_default_instance();
}

StockDB* StockDB::New(::google::protobuf::Arena* arena) const {
  StockDB* n = new StockDB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockDB::Clear() {
// @@protoc_insertion_point(message_clear_start:stp.StockDB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metas_.Clear();
  elements_.Clear();
  stockindex_.Clear();
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stocksize_) -
      reinterpret_cast<char*>(&days_)) + sizeof(stocksize_));
  _internal_metadata_.Clear();
}

bool StockDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stp.StockDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 days = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stockSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stocksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .stp.StockMeta metas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_metas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .stp.StockElement> elements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          StockDB_ElementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StockDB_ElementsEntry_DoNotUse,
              ::std::string, ::stp::StockElement,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::stp::StockElement > > parser(&elements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stp.StockDB.ElementsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> stockIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          StockDB_StockIndexEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StockDB_StockIndexEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&stockindex_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stp.StockDB.StockIndexEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stp.StockDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stp.StockDB)
  return false;
#undef DO_
}

void StockDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stp.StockDB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->days(), output);
  }

  // int32 stockSize = 2;
  if (this->stocksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stocksize(), output);
  }

  // repeated .stp.StockMeta metas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metas(static_cast<int>(i)), output);
  }

  // map<string, .stp.StockElement> elements = 4;
  if (!this->elements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stp.StockDB.ElementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->elements().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->elements().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::stp::StockElement >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_iterator
          it = this->elements().begin();
          it != this->elements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<StockDB_ElementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(elements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StockDB_ElementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_iterator
          it = this->elements().begin();
          it != this->elements().end(); ++it) {
        entry.reset(elements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> stockIndex = 5;
  if (!this->stockindex().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stp.StockDB.StockIndexEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->stockindex().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stockindex().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->stockindex().begin();
          it != this->stockindex().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<StockDB_StockIndexEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stockindex_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StockDB_StockIndexEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->stockindex().begin();
          it != this->stockindex().end(); ++it) {
        entry.reset(stockindex_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stp.StockDB)
}

::google::protobuf::uint8* StockDB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stp.StockDB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->days(), target);
  }

  // int32 stockSize = 2;
  if (this->stocksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stocksize(), target);
  }

  // repeated .stp.StockMeta metas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->metas(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .stp.StockElement> elements = 4;
  if (!this->elements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stp.StockDB.ElementsEntry.key");
      }
    };

    if (deterministic &&
        this->elements().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->elements().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::stp::StockElement >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_iterator
          it = this->elements().begin();
          it != this->elements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<StockDB_ElementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(elements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StockDB_ElementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_iterator
          it = this->elements().begin();
          it != this->elements().end(); ++it) {
        entry.reset(elements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> stockIndex = 5;
  if (!this->stockindex().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "stp.StockDB.StockIndexEntry.key");
      }
    };

    if (deterministic &&
        this->stockindex().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stockindex().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->stockindex().begin();
          it != this->stockindex().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<StockDB_StockIndexEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stockindex_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StockDB_StockIndexEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->stockindex().begin();
          it != this->stockindex().end(); ++it) {
        entry.reset(stockindex_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stp.StockDB)
  return target;
}

size_t StockDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stp.StockDB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .stp.StockMeta metas = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metas(static_cast<int>(i)));
    }
  }

  // map<string, .stp.StockElement> elements = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->elements_size());
  {
    ::google::protobuf::scoped_ptr<StockDB_ElementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::stp::StockElement >::const_iterator
        it = this->elements().begin();
        it != this->elements().end(); ++it) {
      entry.reset(elements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> stockIndex = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stockindex_size());
  {
    ::google::protobuf::scoped_ptr<StockDB_StockIndexEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->stockindex().begin();
        it != this->stockindex().end(); ++it) {
      entry.reset(stockindex_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 days = 1;
  if (this->days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->days());
  }

  // int32 stockSize = 2;
  if (this->stocksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stocksize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockDB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stp.StockDB)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stp.StockDB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stp.StockDB)
    MergeFrom(*source);
  }
}

void StockDB::MergeFrom(const StockDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stp.StockDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metas_.MergeFrom(from.metas_);
  elements_.MergeFrom(from.elements_);
  stockindex_.MergeFrom(from.stockindex_);
  if (from.days() != 0) {
    set_days(from.days());
  }
  if (from.stocksize() != 0) {
    set_stocksize(from.stocksize());
  }
}

void StockDB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stp.StockDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDB::CopyFrom(const StockDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stp.StockDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDB::IsInitialized() const {
  return true;
}

void StockDB::Swap(StockDB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDB::InternalSwap(StockDB* other) {
  using std::swap;
  metas_.InternalSwap(&other->metas_);
  elements_.Swap(&other->elements_);
  stockindex_.Swap(&other->stockindex_);
  swap(days_, other->days_);
  swap(stocksize_, other->stocksize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockDB::GetMetadata() const {
  protobuf_stock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stp

// @@protoc_insertion_point(global_scope)
