// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock.proto

#ifndef PROTOBUF_stock_2eproto__INCLUDED
#define PROTOBUF_stock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_stock_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStockMetaImpl();
void InitDefaultsStockMeta();
void InitDefaultsStockElementImpl();
void InitDefaultsStockElement();
void InitDefaultsStockDB_ElementsEntry_DoNotUseImpl();
void InitDefaultsStockDB_ElementsEntry_DoNotUse();
void InitDefaultsStockDB_StockIndexEntry_DoNotUseImpl();
void InitDefaultsStockDB_StockIndexEntry_DoNotUse();
void InitDefaultsStockDBImpl();
void InitDefaultsStockDB();
inline void InitDefaults() {
  InitDefaultsStockMeta();
  InitDefaultsStockElement();
  InitDefaultsStockDB_ElementsEntry_DoNotUse();
  InitDefaultsStockDB_StockIndexEntry_DoNotUse();
  InitDefaultsStockDB();
}
}  // namespace protobuf_stock_2eproto
namespace stp {
class StockDB;
class StockDBDefaultTypeInternal;
extern StockDBDefaultTypeInternal _StockDB_default_instance_;
class StockDB_ElementsEntry_DoNotUse;
class StockDB_ElementsEntry_DoNotUseDefaultTypeInternal;
extern StockDB_ElementsEntry_DoNotUseDefaultTypeInternal _StockDB_ElementsEntry_DoNotUse_default_instance_;
class StockDB_StockIndexEntry_DoNotUse;
class StockDB_StockIndexEntry_DoNotUseDefaultTypeInternal;
extern StockDB_StockIndexEntry_DoNotUseDefaultTypeInternal _StockDB_StockIndexEntry_DoNotUse_default_instance_;
class StockElement;
class StockElementDefaultTypeInternal;
extern StockElementDefaultTypeInternal _StockElement_default_instance_;
class StockMeta;
class StockMetaDefaultTypeInternal;
extern StockMetaDefaultTypeInternal _StockMeta_default_instance_;
}  // namespace stp
namespace google {
namespace protobuf {
template<> ::stp::StockDB* Arena::Create< ::stp::StockDB>(Arena*);
template<> ::stp::StockDB_ElementsEntry_DoNotUse* Arena::Create< ::stp::StockDB_ElementsEntry_DoNotUse>(Arena*);
template<> ::stp::StockDB_StockIndexEntry_DoNotUse* Arena::Create< ::stp::StockDB_StockIndexEntry_DoNotUse>(Arena*);
template<> ::stp::StockElement* Arena::Create< ::stp::StockElement>(Arena*);
template<> ::stp::StockMeta* Arena::Create< ::stp::StockMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace stp {

enum StockMeta_StockType {
  StockMeta_StockType_MARKET = 0,
  StockMeta_StockType_INDUSTRY = 1,
  StockMeta_StockType_CONCEPT = 2,
  StockMeta_StockType_STOCK = 3,
  StockMeta_StockType_StockMeta_StockType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StockMeta_StockType_StockMeta_StockType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StockMeta_StockType_IsValid(int value);
const StockMeta_StockType StockMeta_StockType_StockType_MIN = StockMeta_StockType_MARKET;
const StockMeta_StockType StockMeta_StockType_StockType_MAX = StockMeta_StockType_STOCK;
const int StockMeta_StockType_StockType_ARRAYSIZE = StockMeta_StockType_StockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StockMeta_StockType_descriptor();
inline const ::std::string& StockMeta_StockType_Name(StockMeta_StockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StockMeta_StockType_descriptor(), value);
}
inline bool StockMeta_StockType_Parse(
    const ::std::string& name, StockMeta_StockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StockMeta_StockType>(
    StockMeta_StockType_descriptor(), name, value);
}
// ===================================================================

class StockMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stp.StockMeta) */ {
 public:
  StockMeta();
  virtual ~StockMeta();

  StockMeta(const StockMeta& from);

  inline StockMeta& operator=(const StockMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockMeta(StockMeta&& from) noexcept
    : StockMeta() {
    *this = ::std::move(from);
  }

  inline StockMeta& operator=(StockMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockMeta* internal_default_instance() {
    return reinterpret_cast<const StockMeta*>(
               &_StockMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StockMeta* other);
  friend void swap(StockMeta& a, StockMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockMeta* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockMeta>(NULL);
  }

  StockMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StockMeta& from);
  void MergeFrom(const StockMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StockMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StockMeta_StockType StockType;
  static const StockType MARKET =
    StockMeta_StockType_MARKET;
  static const StockType INDUSTRY =
    StockMeta_StockType_INDUSTRY;
  static const StockType CONCEPT =
    StockMeta_StockType_CONCEPT;
  static const StockType STOCK =
    StockMeta_StockType_STOCK;
  static inline bool StockType_IsValid(int value) {
    return StockMeta_StockType_IsValid(value);
  }
  static const StockType StockType_MIN =
    StockMeta_StockType_StockType_MIN;
  static const StockType StockType_MAX =
    StockMeta_StockType_StockType_MAX;
  static const int StockType_ARRAYSIZE =
    StockMeta_StockType_StockType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StockType_descriptor() {
    return StockMeta_StockType_descriptor();
  }
  static inline const ::std::string& StockType_Name(StockType value) {
    return StockMeta_StockType_Name(value);
  }
  static inline bool StockType_Parse(const ::std::string& name,
      StockType* value) {
    return StockMeta_StockType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // .stp.StockMeta.StockType stockType = 2;
  void clear_stocktype();
  static const int kStockTypeFieldNumber = 2;
  ::stp::StockMeta_StockType stocktype() const;
  void set_stocktype(::stp::StockMeta_StockType value);

  // int32 marketIndex = 3;
  void clear_marketindex();
  static const int kMarketIndexFieldNumber = 3;
  ::google::protobuf::int32 marketindex() const;
  void set_marketindex(::google::protobuf::int32 value);

  // int32 industryIndex = 4;
  void clear_industryindex();
  static const int kIndustryIndexFieldNumber = 4;
  ::google::protobuf::int32 industryindex() const;
  void set_industryindex(::google::protobuf::int32 value);

  // int32 conceptIndex = 5;
  void clear_conceptindex();
  static const int kConceptIndexFieldNumber = 5;
  ::google::protobuf::int32 conceptindex() const;
  void set_conceptindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stp.StockMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  int stocktype_;
  ::google::protobuf::int32 marketindex_;
  ::google::protobuf::int32 industryindex_;
  ::google::protobuf::int32 conceptindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_stock_2eproto::TableStruct;
  friend void ::protobuf_stock_2eproto::InitDefaultsStockMetaImpl();
};
// -------------------------------------------------------------------

class StockElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stp.StockElement) */ {
 public:
  StockElement();
  virtual ~StockElement();

  StockElement(const StockElement& from);

  inline StockElement& operator=(const StockElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockElement(StockElement&& from) noexcept
    : StockElement() {
    *this = ::std::move(from);
  }

  inline StockElement& operator=(StockElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockElement* internal_default_instance() {
    return reinterpret_cast<const StockElement*>(
               &_StockElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StockElement* other);
  friend void swap(StockElement& a, StockElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockElement* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockElement>(NULL);
  }

  StockElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StockElement& from);
  void MergeFrom(const StockElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StockElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated bool flag = 3;
  int flag_size() const;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  bool flag(int index) const;
  void set_flag(int index, bool value);
  void add_flag(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      flag() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_flag();

  // string line = 4;
  void clear_line();
  static const int kLineFieldNumber = 4;
  const ::std::string& line() const;
  void set_line(const ::std::string& value);
  #if LANG_CXX11
  void set_line(::std::string&& value);
  #endif
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  ::std::string* mutable_line();
  ::std::string* release_line();
  void set_allocated_line(::std::string* line);

  // int32 needDay = 1;
  void clear_needday();
  static const int kNeedDayFieldNumber = 1;
  ::google::protobuf::int32 needday() const;
  void set_needday(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stp.StockElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > flag_;
  mutable int _flag_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr line_;
  ::google::protobuf::int32 needday_;
  mutable int _cached_size_;
  friend struct ::protobuf_stock_2eproto::TableStruct;
  friend void ::protobuf_stock_2eproto::InitDefaultsStockElementImpl();
};
// -------------------------------------------------------------------

class StockDB_ElementsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StockDB_ElementsEntry_DoNotUse, 
    ::std::string, ::stp::StockElement,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<StockDB_ElementsEntry_DoNotUse, 
    ::std::string, ::stp::StockElement,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StockDB_ElementsEntry_DoNotUse();
  StockDB_ElementsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StockDB_ElementsEntry_DoNotUse& other);
  static const StockDB_ElementsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StockDB_ElementsEntry_DoNotUse*>(&_StockDB_ElementsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StockDB_StockIndexEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StockDB_StockIndexEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<StockDB_StockIndexEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  StockDB_StockIndexEntry_DoNotUse();
  StockDB_StockIndexEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StockDB_StockIndexEntry_DoNotUse& other);
  static const StockDB_StockIndexEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StockDB_StockIndexEntry_DoNotUse*>(&_StockDB_StockIndexEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StockDB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stp.StockDB) */ {
 public:
  StockDB();
  virtual ~StockDB();

  StockDB(const StockDB& from);

  inline StockDB& operator=(const StockDB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDB(StockDB&& from) noexcept
    : StockDB() {
    *this = ::std::move(from);
  }

  inline StockDB& operator=(StockDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDB* internal_default_instance() {
    return reinterpret_cast<const StockDB*>(
               &_StockDB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StockDB* other);
  friend void swap(StockDB& a, StockDB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDB* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockDB>(NULL);
  }

  StockDB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StockDB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StockDB& from);
  void MergeFrom(const StockDB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StockDB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .stp.StockMeta metas = 3;
  int metas_size() const;
  void clear_metas();
  static const int kMetasFieldNumber = 3;
  ::stp::StockMeta* mutable_metas(int index);
  ::google::protobuf::RepeatedPtrField< ::stp::StockMeta >*
      mutable_metas();
  const ::stp::StockMeta& metas(int index) const;
  ::stp::StockMeta* add_metas();
  const ::google::protobuf::RepeatedPtrField< ::stp::StockMeta >&
      metas() const;

  // map<string, .stp.StockElement> elements = 4;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::stp::StockElement >&
      elements() const;
  ::google::protobuf::Map< ::std::string, ::stp::StockElement >*
      mutable_elements();

  // map<string, int32> stockIndex = 5;
  int stockindex_size() const;
  void clear_stockindex();
  static const int kStockIndexFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      stockindex() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_stockindex();

  // int32 days = 1;
  void clear_days();
  static const int kDaysFieldNumber = 1;
  ::google::protobuf::int32 days() const;
  void set_days(::google::protobuf::int32 value);

  // int32 stockSize = 2;
  void clear_stocksize();
  static const int kStockSizeFieldNumber = 2;
  ::google::protobuf::int32 stocksize() const;
  void set_stocksize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stp.StockDB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::stp::StockMeta > metas_;
  ::google::protobuf::internal::MapField<
      StockDB_ElementsEntry_DoNotUse,
      ::std::string, ::stp::StockElement,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > elements_;
  ::google::protobuf::internal::MapField<
      StockDB_StockIndexEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > stockindex_;
  ::google::protobuf::int32 days_;
  ::google::protobuf::int32 stocksize_;
  mutable int _cached_size_;
  friend struct ::protobuf_stock_2eproto::TableStruct;
  friend void ::protobuf_stock_2eproto::InitDefaultsStockDBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StockMeta

// string code = 1;
inline void StockMeta::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StockMeta::code() const {
  // @@protoc_insertion_point(field_get:stp.StockMeta.code)
  return code_.GetNoArena();
}
inline void StockMeta::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stp.StockMeta.code)
}
#if LANG_CXX11
inline void StockMeta::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stp.StockMeta.code)
}
#endif
inline void StockMeta::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stp.StockMeta.code)
}
inline void StockMeta::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stp.StockMeta.code)
}
inline ::std::string* StockMeta::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:stp.StockMeta.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockMeta::release_code() {
  // @@protoc_insertion_point(field_release:stp.StockMeta.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockMeta::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:stp.StockMeta.code)
}

// .stp.StockMeta.StockType stockType = 2;
inline void StockMeta::clear_stocktype() {
  stocktype_ = 0;
}
inline ::stp::StockMeta_StockType StockMeta::stocktype() const {
  // @@protoc_insertion_point(field_get:stp.StockMeta.stockType)
  return static_cast< ::stp::StockMeta_StockType >(stocktype_);
}
inline void StockMeta::set_stocktype(::stp::StockMeta_StockType value) {
  
  stocktype_ = value;
  // @@protoc_insertion_point(field_set:stp.StockMeta.stockType)
}

// int32 marketIndex = 3;
inline void StockMeta::clear_marketindex() {
  marketindex_ = 0;
}
inline ::google::protobuf::int32 StockMeta::marketindex() const {
  // @@protoc_insertion_point(field_get:stp.StockMeta.marketIndex)
  return marketindex_;
}
inline void StockMeta::set_marketindex(::google::protobuf::int32 value) {
  
  marketindex_ = value;
  // @@protoc_insertion_point(field_set:stp.StockMeta.marketIndex)
}

// int32 industryIndex = 4;
inline void StockMeta::clear_industryindex() {
  industryindex_ = 0;
}
inline ::google::protobuf::int32 StockMeta::industryindex() const {
  // @@protoc_insertion_point(field_get:stp.StockMeta.industryIndex)
  return industryindex_;
}
inline void StockMeta::set_industryindex(::google::protobuf::int32 value) {
  
  industryindex_ = value;
  // @@protoc_insertion_point(field_set:stp.StockMeta.industryIndex)
}

// int32 conceptIndex = 5;
inline void StockMeta::clear_conceptindex() {
  conceptindex_ = 0;
}
inline ::google::protobuf::int32 StockMeta::conceptindex() const {
  // @@protoc_insertion_point(field_get:stp.StockMeta.conceptIndex)
  return conceptindex_;
}
inline void StockMeta::set_conceptindex(::google::protobuf::int32 value) {
  
  conceptindex_ = value;
  // @@protoc_insertion_point(field_set:stp.StockMeta.conceptIndex)
}

// -------------------------------------------------------------------

// StockElement

// int32 needDay = 1;
inline void StockElement::clear_needday() {
  needday_ = 0;
}
inline ::google::protobuf::int32 StockElement::needday() const {
  // @@protoc_insertion_point(field_get:stp.StockElement.needDay)
  return needday_;
}
inline void StockElement::set_needday(::google::protobuf::int32 value) {
  
  needday_ = value;
  // @@protoc_insertion_point(field_set:stp.StockElement.needDay)
}

// repeated float data = 2;
inline int StockElement::data_size() const {
  return data_.size();
}
inline void StockElement::clear_data() {
  data_.Clear();
}
inline float StockElement::data(int index) const {
  // @@protoc_insertion_point(field_get:stp.StockElement.data)
  return data_.Get(index);
}
inline void StockElement::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:stp.StockElement.data)
}
inline void StockElement::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:stp.StockElement.data)
}
inline const ::google::protobuf::RepeatedField< float >&
StockElement::data() const {
  // @@protoc_insertion_point(field_list:stp.StockElement.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
StockElement::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:stp.StockElement.data)
  return &data_;
}

// repeated bool flag = 3;
inline int StockElement::flag_size() const {
  return flag_.size();
}
inline void StockElement::clear_flag() {
  flag_.Clear();
}
inline bool StockElement::flag(int index) const {
  // @@protoc_insertion_point(field_get:stp.StockElement.flag)
  return flag_.Get(index);
}
inline void StockElement::set_flag(int index, bool value) {
  flag_.Set(index, value);
  // @@protoc_insertion_point(field_set:stp.StockElement.flag)
}
inline void StockElement::add_flag(bool value) {
  flag_.Add(value);
  // @@protoc_insertion_point(field_add:stp.StockElement.flag)
}
inline const ::google::protobuf::RepeatedField< bool >&
StockElement::flag() const {
  // @@protoc_insertion_point(field_list:stp.StockElement.flag)
  return flag_;
}
inline ::google::protobuf::RepeatedField< bool >*
StockElement::mutable_flag() {
  // @@protoc_insertion_point(field_mutable_list:stp.StockElement.flag)
  return &flag_;
}

// string line = 4;
inline void StockElement::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StockElement::line() const {
  // @@protoc_insertion_point(field_get:stp.StockElement.line)
  return line_.GetNoArena();
}
inline void StockElement::set_line(const ::std::string& value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stp.StockElement.line)
}
#if LANG_CXX11
inline void StockElement::set_line(::std::string&& value) {
  
  line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stp.StockElement.line)
}
#endif
inline void StockElement::set_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stp.StockElement.line)
}
inline void StockElement::set_line(const char* value, size_t size) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stp.StockElement.line)
}
inline ::std::string* StockElement::mutable_line() {
  
  // @@protoc_insertion_point(field_mutable:stp.StockElement.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockElement::release_line() {
  // @@protoc_insertion_point(field_release:stp.StockElement.line)
  
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockElement::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    
  } else {
    
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:stp.StockElement.line)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StockDB

// int32 days = 1;
inline void StockDB::clear_days() {
  days_ = 0;
}
inline ::google::protobuf::int32 StockDB::days() const {
  // @@protoc_insertion_point(field_get:stp.StockDB.days)
  return days_;
}
inline void StockDB::set_days(::google::protobuf::int32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:stp.StockDB.days)
}

// int32 stockSize = 2;
inline void StockDB::clear_stocksize() {
  stocksize_ = 0;
}
inline ::google::protobuf::int32 StockDB::stocksize() const {
  // @@protoc_insertion_point(field_get:stp.StockDB.stockSize)
  return stocksize_;
}
inline void StockDB::set_stocksize(::google::protobuf::int32 value) {
  
  stocksize_ = value;
  // @@protoc_insertion_point(field_set:stp.StockDB.stockSize)
}

// repeated .stp.StockMeta metas = 3;
inline int StockDB::metas_size() const {
  return metas_.size();
}
inline void StockDB::clear_metas() {
  metas_.Clear();
}
inline ::stp::StockMeta* StockDB::mutable_metas(int index) {
  // @@protoc_insertion_point(field_mutable:stp.StockDB.metas)
  return metas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::stp::StockMeta >*
StockDB::mutable_metas() {
  // @@protoc_insertion_point(field_mutable_list:stp.StockDB.metas)
  return &metas_;
}
inline const ::stp::StockMeta& StockDB::metas(int index) const {
  // @@protoc_insertion_point(field_get:stp.StockDB.metas)
  return metas_.Get(index);
}
inline ::stp::StockMeta* StockDB::add_metas() {
  // @@protoc_insertion_point(field_add:stp.StockDB.metas)
  return metas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stp::StockMeta >&
StockDB::metas() const {
  // @@protoc_insertion_point(field_list:stp.StockDB.metas)
  return metas_;
}

// map<string, .stp.StockElement> elements = 4;
inline int StockDB::elements_size() const {
  return elements_.size();
}
inline void StockDB::clear_elements() {
  elements_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::stp::StockElement >&
StockDB::elements() const {
  // @@protoc_insertion_point(field_map:stp.StockDB.elements)
  return elements_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::stp::StockElement >*
StockDB::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_map:stp.StockDB.elements)
  return elements_.MutableMap();
}

// map<string, int32> stockIndex = 5;
inline int StockDB::stockindex_size() const {
  return stockindex_.size();
}
inline void StockDB::clear_stockindex() {
  stockindex_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
StockDB::stockindex() const {
  // @@protoc_insertion_point(field_map:stp.StockDB.stockIndex)
  return stockindex_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
StockDB::mutable_stockindex() {
  // @@protoc_insertion_point(field_mutable_map:stp.StockDB.stockIndex)
  return stockindex_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stp::StockMeta_StockType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stp::StockMeta_StockType>() {
  return ::stp::StockMeta_StockType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stock_2eproto__INCLUDED
