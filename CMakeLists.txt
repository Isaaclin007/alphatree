cmake_minimum_required(VERSION 3.3)
project(alphatree)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

find_package(Protobuf REQUIRED)
if(PROTOBUF_FOUND)
    message(STATUS "protobuf library found")
else()
    message(FATAL_ERROR "protobuf library is needed but cant be found")
endif()
include_directories(${PROTOBUF_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#include_directories("/usr/local/include")
#link_directories("/usr/local/lib")
#find_package(Protobuf REQUIRED)
#include_directories(${PROTOBUF_INCLUDE_DIRS})
#include_directories(${CMAKE_CURRENT_BINARY_DIR})

set(SOURCE_FILES test.cpp libalphatree/alpha/alpha.h libalphatree/alpha/alphaatom.h libalphatree/alpha/alphatree.h libalphatree/alphaforest.h libalphatree/alpha/base.h libalphatree/alpha/converter.h libalphatree/base/cache.h libalphatree/base/threadpool.h libalphatree/alpha/alphadb.h libalphatree/base/normal.h libalphatree/base/hashname.h libalphatree/base/darray.h libalphatree/base/hashmap.h libalphatree/base/dcache.h libalphatree/alpha/basealphatree.h libalphatree/alpha/alphaprocess.h libalphatree/alpha/process.h libalphatree/filter/basefiltertree.h libalphatree/filter/filtertree.h libalphatree/filter/filterforest.h libalphatree/filter/filterhistogram.h libalphatree/base/pareto.h libalphatree/base/randomchoose.h)
add_executable(alphatree ${SOURCE_FILES})
#target_link_libraries(alphatree ${PROTOBUF_LIBRARIES})
#target_link_libraries(alphatree protobuf)
#target_link_libraries(alphatree ${PROTOBUF_LIBRARIES})
#target_link_libraries(alphatree "/usr/local/lib/libprotobuf.a /usr/local/lib/libprotoc.a")